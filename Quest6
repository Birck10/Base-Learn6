// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GarageManager {

    // Define the Car struct
    struct Car {
        string make;
        string model;
        string color;
        uint numberOfDoors;
    }

    // Mapping to store user's cars
    mapping(address => Car[]) public garage;

    // Custom error for invalid car index
    error BadCarIndex(uint index);

    // Add a car to the user's garage
    function addCar(string memory _make, string memory _model, string memory _color, uint _numberOfDoors) public {
        Car memory newCar = Car({
            make: _make,
            model: _model,
            color: _color,
            numberOfDoors: _numberOfDoors
        });

        garage[msg.sender].push(newCar);
    }

    // Get all cars for the calling user
    function getMyCars() public view returns (Car[] memory) {
        return garage[msg.sender];
    }

    // Get all cars for a given address
    function getUserCars(address user) public view returns (Car[] memory) {
        return garage[user];
    }

    // Update a specific car for the calling user
    function updateCar(uint index, string memory _make, string memory _model, string memory _color, uint _numberOfDoors) public {
        if (index >= garage[msg.sender].length) {
            revert BadCarIndex(index);
        }

        garage[msg.sender][index] = Car({
            make: _make,
            model: _model,
            color: _color,
            numberOfDoors: _numberOfDoors
        });
    }

    // Reset the calling user's garage (delete all cars)
    function resetMyGarage() public {
        delete garage[msg.sender];
    }
}
